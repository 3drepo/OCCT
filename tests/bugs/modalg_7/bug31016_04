puts "========"
puts "OCC31016"
puts "========"
puts ""
###################################################################
# Projection of an ellipse or a circle is a B-spline in some cases
###################################################################

set projDir { 1 1 1 }

circle c 0 0 0  10
plane p 0 0 0  1 0 1
projonplane r c p [lindex $projDir 0] [lindex $projDir 1] [lindex $projDir 2] 0

if {![regexp {Ellipse} [dump r]]} {
  puts "ERROR: Projected curve is not an ellipse"
}

proc toPlane {pln dir curve param} {
  upvar $pln p
  upvar $curve crv
  cvalue crv $param x y z
  line ln x y z [lindex $dir 0] [lindex $dir 1] [lindex $dir 2]
  intersect pt ln p
  regexp {Point : ([-0-9.+eE]+), ([-0-9.+eE]+), ([-0-9.+eE]+)} [dump pt] full x y z

  set pntOnPlane {}
  lappend pntOnPlane $x
  lappend pntOnPlane $y
  lappend pntOnPlane $z
  return $pntOnPlane
}

# calculate a parametric shift on the projected curve
set pnt [toPlane p $projDir c 0]
parameters r [lindex $pnt 0] [lindex $pnt 1] [lindex $pnt 2] 0.1 shift

set nbPoints 100
for {set i 0} {$i <= $nbPoints} {incr i} {
  set par0 [expr 8*atan(1)*$i/$nbPoints]
  set par1 [expr $par0 + [dval shift]]

  set pnt [toPlane p $projDir c $par0]
  cvalue r $par1 X Y Z

  set dx [expr [lindex $pnt 0]-[dval X]]
  set dy [expr [lindex $pnt 1]-[dval Y]]
  set dz [expr [lindex $pnt 2]-[dval Z]]

  if {[expr $dx*$dx + $dy*$dy + $dz*$dz] < 1.e-14} {
    puts "OK: Projection correct"
  } else {
    puts "ERROR: Projection incorrect"
  }
}
